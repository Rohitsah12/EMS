generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id             String       @id @default(uuid())
  employeeId     String       @unique
  name           String
  dateOfBirth    DateTime     @db.Date
  maritalStatus  MaritalStatus
  joinDate       DateTime     @default(now())
  designation    String
  isActive       Boolean      @default(true)
  email          String       @unique
  passwordHash   String
  role           UserRole     @default(EMPLOYEE)
  personalEmail  String       @unique
  phone          String       @unique
  address        String

  department     Department   @relation(fields: [departmentId], references: [id])
  departmentId   String
  managedDepartment Department? @relation("ManagedDepartment")

  leaves         Leave[]      @relation("RequestedBy")
  approvedLeaves Leave[]      @relation("ApprovedBy")
  salaryHistory  Salary[]
  attendanceRecords Attendance[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Department {
  id          String      @id @default(uuid())
  name        String      @unique
  employees   Employee[]
  manager     Employee?   @relation("ManagedDepartment", fields: [managerId], references: [id])
  managerId   String?     @unique
  annualBudget  Decimal?  @db.Decimal(15, 2) @default(0.00)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Salary {
  id            String     @id @default(uuid())
  baseSalary    Decimal    @db.Decimal(12, 2)
  effectiveDate DateTime
  employee      Employee   @relation(fields: [employeeId], references: [id])
  employeeId    String

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Leave {
  id            String        @id @default(uuid())
  leaveType     LeaveType
  startDate     DateTime
  endDate       DateTime
  reason        String
  status        LeaveStatus   @default(PENDING)
  requestedAt   DateTime      @default(now())
  actionAt      DateTime?

  employee      Employee      @relation("RequestedBy", fields: [employeeId], references: [id])
  employeeId    String

  approvedBy    Employee?     @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById  String?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Attendance {
  id           String           @id @default(uuid())
  date         DateTime         @db.Date
  status       AttendanceStatus
  notes        String?
  employee     Employee         @relation(fields: [employeeId], references: [id])
  employeeId   String

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([employeeId, date])
}

enum UserRole {
  HR
  EMPLOYEE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  ANNUAL
  SICK
  CASUAL
  UNPAID
  MATERNITY
  PATERNITY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  ON_LEAVE
}
